<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="NAF 2008 - consultation">
    <title>NAF 2008 - consultation</title>
    <link href="../commun.css" rel="stylesheet" type="text/css"/>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha384-vtXRMe3mGCbOeY7l30aIg8H9p3GdeSe4IFlP6G8JMa7o7lXvnz3GFKzPxzJdPfGK" crossorigin="anonymous"></script>
    <script>
        const endpointURL = "https://rdf.insee.fr/sparql";
        const racine = "http://id.insee.fr/codes/";
        const nomenclature = "nafr2";
        const regex = new RegExp(racine + nomenclature + "/[A-Z0-9]+/", "g");
        const replacement = 'display-item.htm?code=';
        const itemTypes = ['Section', 'Division', 'Groupe', 'Classe', 'Sous-classe'];
        const parentLength = [0, 0, 1, 2, 4, 5];

        document.addEventListener("DOMContentLoaded", function() {
            const code = sanitizeInput(getURLParameter('code'));
            if (code) {
                const formattedCode = formatCodeWithDot(code);
                document.getElementById('fil-ariane').innerHTML = '<ul>' + breadcrumbs(formattedCode, false) + '</ul>';
                getLabel(formattedCode);
            } else {
                console.error('Code is null or empty.');
            }
        });

        async function fetchData(query, type = "json") {
            const headers = {
                'Accept': type === 'n-triples' ? 'application/n-triples' : 'application/sparql-results+json'
            };
            try {
                const response = await fetch(`${endpointURL}?query=${encodeURIComponent(query)}`, {
                    method: 'GET',
                    headers: headers,
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const contentType = response.headers.get("content-type");
                if (type === "json" && contentType.includes("application/sparql-results+json")) {
                    return await response.json();
                } else if (type === "n-triples" && contentType.includes("application/n-triples")) {
                    const text = await response.text();
                    return parseNTriples(text);
                } else {
                    throw new Error('Received content is not in the expected format');
                }
            } catch (error) {
                console.error('Error fetching data:', error);
                throw error;
            }
        }

        function parseNTriples(text) {
            const triples = text.trim().split('\n').map(line => {
                const match = line.match(/<([^>]*)>\s*<([^>]*)>\s*<([^>]*)>|<([^>]*)>\s*<([^>]*)>\s*"([^"]*)"/);
                if (match) {
                    return {
                        subject: match[1] || match[4],
                        predicate: match[2] || match[5],
                        object: match[3] || match[6]
                    };
                } else {
                    console.error('Failed to parse n-triple line:', line);
                    return null;
                }
            });
            return triples.filter(triple => triple !== null);
        }

        async function getLabel(code) {
            const query = `
                PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
                SELECT ?uri ?label WHERE {
                    GRAPH <http://rdf.insee.fr/graphes/codes/${nomenclature}> {
                        ?uri skos:prefLabel ?label ; skos:notation '${encodeHTML(code)}'.
                        FILTER langMatches (lang(?label), 'fr')
                    }
                }
            `;
            try {
                const data = await fetchData(query);
                if (data.results.bindings.length > 0) {
                    const itemURI = data.results.bindings[0].uri.value;
                    document.getElementById('label').textContent = `${code} - ${data.results.bindings[0].label.value}`;
                    getDescription(itemURI);
                    const childTypeIndex = code.length === 1 ? 1 : code.length;
                    getChildren(itemURI, itemTypes[childTypeIndex]);
                } else {
                    document.getElementById('label').textContent = "Code non trouvé";
                }
            } catch (error) {
                document.getElementById('label').textContent = "Erreur lors de la récupération des données";
                console.error('Error in getLabel:', error);
            }
        }

        async function getDescription(itemURI) {
            const query = `
                PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
                DESCRIBE <${encodeHTML(itemURI)}>
            `;
            try {
                const data = await fetchData(query, "n-triples");
                data.forEach(triple => {
                    const predicateValue = triple.predicate;
                    const objectValue = triple.object;
                    if (predicateValue === "http://www.w3.org/2004/02/skos/core#scopeNote") getNote(objectValue, "note-generale");
                    else if (predicateValue === "http://rdf-vocabulary.ddialliance.org/xkos#coreContentNote") getNote(objectValue, "contenu-central");
                    else if (predicateValue === "http://rdf-vocabulary.ddialliance.org/xkos#additionalContentNote") getNote(objectValue, "contenu-limite");
                    else if (predicateValue === "http://rdf-vocabulary.ddialliance.org/xkos#exclusionNote") getNote(objectValue, "exclusions");
                    else if (predicateValue === "http://www.w3.org/2004/02/skos/core#note") getNote(objectValue, "remarques");
                });
            } catch (error) {
                console.error('Error in getDescription:', error);
            }
        }

        async function getChildren(itemURI, childType) {
            const query = `
                PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
                SELECT ?code ?label WHERE {
                    <${encodeHTML(itemURI)}> skos:narrower ?child .
                    ?child skos:notation ?code ; skos:prefLabel ?label .
                    FILTER langMatches (lang(?label), 'fr')
                } ORDER BY ?code
            `;
            try {
                const data = await fetchData(query);
                if (data.results.bindings.length > 0) {
                    let innerHTML = '<p class="nom-enfants">' + escapeHtml(childType) + (data.results.bindings.length > 1 ? 's' : '') + '</p><ul class="enfants">';
                    data.results.bindings.forEach(item => {
                        const childCode = encodeHTML(item.code.value);
                        const childLabel = decodeHtmlEntities(item.label.value);  // Decoding the HTML entities here
                        innerHTML += `<li><p><a href="${replacement}${encodeURIComponent(childCode)}">${escapeHtml(childCode)} - ${escapeHtml(childLabel)}</a></p></li>`;
                    });
                    innerHTML += '</ul>';
                    const sousItemsElement = document.getElementById('sous-items');
                    sousItemsElement.innerHTML = innerHTML;
                    sousItemsElement.classList.add("sous-items");
                } else {
                    document.getElementById('sous-items').textContent = "Aucun élément trouvé";
                }
            } catch (error) {
                document.getElementById('sous-items').textContent = "Erreur lors de la récupération des données";
                console.error('Error in getChildren:', error);
            }
        }

        async function getNote(uri, tag) {
            const query = `
                SELECT ?text WHERE {
                    <${encodeHTML(uri)}> <http://eurovoc.europa.eu/schema#noteLiteral> ?text
                }
            `;
            try {
                const data = await fetchData(query);
                if (data.results.bindings.length > 0) {
                    const noteText = encodeHTML(data.results.bindings[0].text.value.replace(regex, replacement));
                    const tagElement = document.getElementById(tag);
                    tagElement.innerHTML += noteText.replace(/\\\$/g, "<br />");
                    tagElement.classList.add(tag);
                }
            } catch (error) {
                console.error('Error in getNote:', error);
            }
        }

		function getURLParameter(name) {
            const regex = new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)');
            const result = regex.exec(location.search);
            let paramValue = result ? decodeURIComponent(result[1].replace(/\+/g, '%20')) : null;
    
            return sanitizeInput(paramValue);  // Sanitize the input here
        }

        function breadcrumbs(code, finalLink) {
            if (!code) {
                console.error('Code is null or empty.');
                return '';
            }

            const niveau = determineNiveau(code.length);
            const sanitizedCode = encodeHTML(code);
            const name = `${niveau}${sanitizedCode}`;
            const fin = finalLink ?
                `<li><a href="${replacement}${encodeURIComponent(sanitizedCode)}" title="${escapeHtml(name)}">${escapeHtml(decodeHtmlEntities(name))}</a></li>` :
                `<li>${escapeHtml(decodeHtmlEntities(name))}</li>`;

            if (code.length === 1) {
                return `<li><a href="naf.htm" title="Accueil">NAF</a></li>&nbsp;${fin}`;
            } else {
                const parentCode = getParentCode(code);
                if (parentCode && parentCode !== code) {
                    return `${breadcrumbs(parentCode, true)}&nbsp;${fin}`;
                } else {
                    return fin;
                }
            }
        }

        function getParentCode(code) {
            // Si le code est déjà au niveau le plus élevé, il ne devrait pas avoir de parent.
            if (code.length <= 1) {
                return null;
            }

            // Logique pour calculer le code parent en fonction de la longueur du code.
            if (code.length === 2) {
                const codeNum = parseInt(code);
                const sectionBounds = [1, 5, 10, 35, 36, 41, 45, 49, 55, 58, 64, 68, 69, 77, 84, 85, 86, 90, 94, 97, 99];
                const sections = "ABCDEFGHIJKLMNOPQRSTU";
                for (let index = 0; index < sectionBounds.length; index++) {
                    if (codeNum < sectionBounds[index]) return sections[index - 1];
                }
                return sections[sections.length - 1];
            }

            if (code.length > 2) {
                return code.slice(0, -1); // Supprimez le dernier caractère pour obtenir le code parent
            }

            return null;
        }

        function determineNiveau(length) {
            switch (length) {
                case 1: return 'Section ';
                case 2: return 'Division ';
                case 3: return 'Groupe ';
                case 4: return 'Classe ';
                case 5: return 'Sous-classe ';
                default: return '';
            }
        }

        function encodeHTML(str) {
            if (str == null) {
                return '';
            }
            return str.replace(/&/g, '&amp;')
                      .replace(/</g, '&lt;')
                      .replace(/>/g, '&gt;')
                      .replace(/"/g, '&quot;')
                      .replace(/'/g, '&#39;');
        }

        function sanitizeInput(input) {
            return input ? input.replace(/[^a-zA-Z0-9.-_]/g, '') : '';
        }

		function escapeHtml(text) {
            if (typeof text !== 'string') {
                console.error('Expected a string but got:', text);
                return '';
            }
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }

        function decodeHtmlEntities(text) {
            const textarea = document.createElement('textarea');
            textarea.innerHTML = text;
            return textarea.value;
        }

        function formatCodeWithDot(code) {
            if (code.length === 4 && !code.includes('.')) {
                return code.slice(0, 2) + '.' + code.slice(2);
            }
            return code;
        }
    </script>
</head>
<body>
    <div id="fil-ariane"></div>
    <h1 id="label" class="item"></h1>
    <br/>
    <div id="notes">
        <div id="note-generale"></div>
        <div id="contenu-central"></div>
        <div id="contenu-limite"></div>
        <div id="exclusions"></div>
        <div id="remarques"></div>
    </div>
    <div id="sous-items"></div>
</body>
</html>
